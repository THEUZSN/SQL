CREATE DATABASE E_COMMERCE;
USE E_COMMERCE;

CREATE TABLE CLIENTE (
	ID_CLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(30) NULL,
    SENHA VARCHAR(10) NOT NULL,
    ENDERECO VARCHAR(60) NULL,
    TELEFONE VARCHAR(20) NULL
);

CREATE TABLE PEDIDO (
 ID_PEDIDO INT PRIMARY KEY AUTO_INCREMENT,
 ID_CLIENTE INT NOT NULL,
 FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE CASCADE,
 DATA_PEDIDO DATE NULL,
 STATUS_ VARCHAR(50),
 TOTAL DECIMAL(10,2)
);

CREATE TABLE PAGAMENTO(
	ID_PAGAMENTO INT PRIMARY KEY AUTO_INCREMENT,
    ID_PEDIDO INT NOT NULL,
    FOREIGN KEY(ID_PEDIDO) REFERENCES PEDIDO(ID_PEDIDO) ON DELETE CASCADE,
    TIPO VARCHAR(50) NOT NULL,
    STATUS_ VARCHAR(50),
    DATA_PAGAMENTO DATE NULL
);

CREATE TABLE CATEGORIA(
	ID_CATEGORIA INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(50) NOT NULL,
    DESCRICAO VARCHAR(50) NOT NULL
);

CREATE TABLE PRODUTO(
	ID_PRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(50) NOT NULL,
    DESCRICAO VARCHAR(100) NOT NULL,
    PRECO DECIMAL(10,2) NOT NULL,
    ID_CATEGORIA INT NOT NULL,
    FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIA(ID_CATEGORIA) ON DELETE CASCADE
);

CREATE TABLE ITEM_PEDIDO(
	ID_ITEM INT PRIMARY KEY AUTO_INCREMENT,
    ID_PEDIDO INT NOT NULL,
    ID_PRODUTO INT NULL,
    FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO(ID_PEDIDO) ON DELETE CASCADE,
    FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO(ID_PRODUTO) ON DELETE CASCADE,
    QUANTIDADE INT NOT NULL,
    PRECO_UNITARIO DECIMAL(10,2) NOT NULL
);

INSERT INTO CLIENTE (ID_CLIENTE, NOME, EMAIL, SENHA, ENDERECO, TELEFONE) VALUES
(1, 'Iury Silva', 'iury.silva@email.com', '123456', 'Rua A, 100', '11999990001'),
(2, 'Maria Eduarda Souza', 'maria_souza@email.com', 'abcdef', 'Rua B, 200', '11999990002'),
(3, 'Carlos Lima Duarde', 'carlinhos@email.com', 'senha123', 'Rua C, 300', '11999990003'),
(4, 'Ana Paula da Silva Fontes', 'anapaulasf@email.com', 'pass1234', 'Rua D, 400', '11999990004'),
(5, 'Fernanda Montenegro Rocha', 'ferocha@email.com', 'rocha123', 'Rua E, 500', '11999990005');

INSERT INTO CATEGORIA(ID_CATEGORIA, NOME, DESCRICAO) VALUES
(1, 'Eletrônicos', 'Dispositivos eletrônicos'),
(2, 'Livros', 'Livros de diversas categorias'),
(3, 'Roupas', 'Moda masculina e feminina'),
(4, 'Casa', 'Produtos para casa e decoração'),
(5, 'Esportes', 'Equipamentos esportivos');

INSERT INTO PRODUTO(ID_PRODUTO, NOME, DESCRICAO, PRECO, ID_CATEGORIA) VALUES
(1, 'Notebook', 'Notebook Acer Nitro', 3500.00, 1),
(2, 'Livro de MySQL', 'Livro sobre banco de dados', 89.90, 2),
(3, 'Camiseta do Santos FC', 'Camiseta 100% algodão', 39.90, 3),
(4, 'Sofá 5 lugares', 'Sofá confortável', 1200.00, 4),
(5, 'Bola de futebol Nike', 'Bola oficial', 79.90, 5);

INSERT INTO PEDIDO(ID_PEDIDO, ID_CLIENTE, DATA_PEDIDO, STATUS_, TOTAL) VALUES
(1, 1, '2025-04-01', 'Concluído', 3589.90),
(2, 2, '2025-04-02', 'Pendente', 89.90),
(3, 3, '2025-04-03', 'Cancelado', 39.90),
(4, 4, '2025-04-04', 'Enviado', 1200.00),
(5, 5, '2025-04-05', 'Concluído', 79.90);

INSERT INTO ITEM_PEDIDO(ID_ITEM, ID_PEDIDO, ID_PRODUTO, QUANTIDADE, PRECO_UNITARIO)VALUES
(1, 1, 1, 1, 3500.00),
(2, 1, 2, 1, 89.90),
(3, 2, 2, 1, 89.90),
(4, 3, 3, 1, 39.90),
(5, 4, 4, 1, 1200.00);

INSERT INTO PAGAMENTO(ID_PAGAMENTO, ID_PEDIDO, TIPO, STATUS_, DATA_PAGAMENTO)VALUES
(1, 1, 'Cartão de Crédito', 'Pago', '2025-04-01'),
(2, 2, 'Boleto', 'Aguardando', '2025-04-02'),
(3, 3, 'Pix', 'Cancelado', '2025-04-03'),
(4, 4, 'Cartão de Débito', 'Pago', '2025-04-04'),
(5, 5, 'Pix', 'Pago', '2025-04-05');

-- Listar todos os clientes cadastrados.
SELECT * FROM CLIENTE;
-- Exibir todos os produtos com preço maior que R$ 100
SELECT * FROM PRODUTO WHERE PRECO > 100;
-- Listar os pedidos com status 'Concluído'.
SELECT * FROM PEDIDO WHERE STATUS_ = "Concluido";
-- Listar os nomes dos clientes e o total dos seus pedidos.
SELECT NOME, TOTAL FROM CLIENTE INNER JOIN PEDIDO ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE;
-- Exibir os produtos e a categoria a que pertencem.
SELECT PRODUTO.NOME, CATEGORIA.NOME FROM PRODUTO INNER JOIN  CATEGORIA ON CATEGORIA.ID_CATEGORIA = PRODUTO.ID_CATEGORIA;
-- Listar os itens dos pedidos com nome do produto, quantidade e preço unitário.
SELECT PRODUTO.NOME, PRODUTO.PRECO, ITEM_PEDIDO.QUANTIDADE FROM ITEM_PEDIDO INNER JOIN PRODUTO ON ITEM_PEDIDO.ID_PRODUTO = PRODUTO.ID_PRODUTO;
-- Calcular o valor total de vendas por categoria.
SELECT SUM(TOTAL), CATEGORIA.NOME FROM PEDIDO INNER JOIN ITEM_PEDIDO ON ITEM_PEDIDO.ID_PEDIDO = PEDIDO.ID_PEDIDO INNER JOIN PRODUTO ON ITEM_PEDIDO.ID_PRODUTO = PRODUTO.ID_PRODUTO INNER JOIN CATEGORIA ON CATEGORIA.ID_CATEGORIA = PRODUTO.ID_CATEGORIA WHERE PRODUTO.ID_CATEGORIA = 1;
SELECT SUM(TOTAL), CATEGORIA.NOME FROM PEDIDO INNER JOIN ITEM_PEDIDO ON ITEM_PEDIDO.ID_PEDIDO = PEDIDO.ID_PEDIDO INNER JOIN PRODUTO ON ITEM_PEDIDO.ID_PRODUTO = PRODUTO.ID_PRODUTO INNER JOIN CATEGORIA ON CATEGORIA.ID_CATEGORIA = PRODUTO.ID_CATEGORIA  WHERE PRODUTO.ID_CATEGORIA = 2;
SELECT SUM(TOTAL), CATEGORIA.NOME FROM PEDIDO INNER JOIN ITEM_PEDIDO ON ITEM_PEDIDO.ID_PEDIDO = PEDIDO.ID_PEDIDO INNER JOIN PRODUTO ON ITEM_PEDIDO.ID_PRODUTO = PRODUTO.ID_PRODUTO INNER JOIN CATEGORIA ON CATEGORIA.ID_CATEGORIA = PRODUTO.ID_CATEGORIA  WHERE PRODUTO.ID_CATEGORIA = 3;
SELECT SUM(TOTAL), CATEGORIA.NOME FROM PEDIDO INNER JOIN ITEM_PEDIDO ON ITEM_PEDIDO.ID_PEDIDO = PEDIDO.ID_PEDIDO INNER JOIN PRODUTO ON ITEM_PEDIDO.ID_PRODUTO = PRODUTO.ID_PRODUTO INNER JOIN CATEGORIA ON CATEGORIA.ID_CATEGORIA = PRODUTO.ID_CATEGORIA  WHERE PRODUTO.ID_CATEGORIA = 4;
-- NÃO TEM PEDIDOS DA CATEGORIA ESPORTES
SELECT SUM(TOTAL), CATEGORIA.NOME FROM PEDIDO INNER JOIN ITEM_PEDIDO ON ITEM_PEDIDO.ID_PEDIDO = PEDIDO.ID_PEDIDO INNER JOIN PRODUTO ON ITEM_PEDIDO.ID_PRODUTO = PRODUTO.ID_PRODUTO INNER JOIN CATEGORIA ON CATEGORIA.ID_CATEGORIA = PRODUTO.ID_CATEGORIA  WHERE PRODUTO.ID_CATEGORIA = 5;

-- Contar quantos pedidos foram realizados por cliente
SELECT COUNT(PEDIDO.ID_CLIENTE) AS QUANTIDADE, NOME FROM PEDIDO INNER JOIN CLIENTE ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE = 1;
SELECT COUNT(PEDIDO.ID_CLIENTE) AS QUANTIDADE, NOME FROM PEDIDO INNER JOIN CLIENTE ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE = 2;
SELECT COUNT(PEDIDO.ID_CLIENTE) AS QUANTIDADE, NOME FROM PEDIDO INNER JOIN CLIENTE ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE = 3;
SELECT COUNT(PEDIDO.ID_CLIENTE) AS QUANTIDADE, NOME FROM PEDIDO INNER JOIN CLIENTE ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE = 4;
SELECT COUNT(PEDIDO.ID_CLIENTE) AS QUANTIDADE, NOME FROM PEDIDO INNER JOIN CLIENTE ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE = 5;

--  Atualizar o status de um pedido para 'Entregue'
UPDATE PEDIDO SET STATUS_ = "Entregue" WHERE ID_PEDIDO = 2;

-- Excluir um cliente (atenção às dependências de chave estrangeira)
DELETE FROM CLIENTE WHERE ID_CLIENTE = 5;

-- Listar os produtos mais caros primeiro
SELECT * FROM PRODUTO ORDER BY PRECO DESC;

-- Exibir pagamentos realizados por Pix ordenados pela data.
SELECT * FROM PAGAMENTO WHERE TIPO = "Pix" ORDER BY DATA_PAGAMENTO;

-- Exibir o cliente, o número de pedidos e o valor total gasto
SELECT CLIENTE.NOME, COUNT(ID_PEDIDO) AS PEDIDOS, SUM(TOTAL) AS TOTAL_GASTO FROM CLIENTE INNER JOIN PEDIDO ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE =  1;
SELECT CLIENTE.NOME, COUNT(ID_PEDIDO) AS PEDIDOS, SUM(TOTAL) AS TOTAL_GASTO FROM CLIENTE INNER JOIN PEDIDO ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE =  2;
SELECT CLIENTE.NOME, COUNT(ID_PEDIDO) AS PEDIDOS, SUM(TOTAL) AS TOTAL_GASTO FROM CLIENTE INNER JOIN PEDIDO ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE =  3;
SELECT CLIENTE.NOME, COUNT(ID_PEDIDO) AS PEDIDOS, SUM(TOTAL) AS TOTAL_GASTO FROM CLIENTE INNER JOIN PEDIDO ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE =  4;
-- O PROXIMO SERÁ VAZIO PORQUE A CLIENTE FOI EXCLUÍDA :(
SELECT CLIENTE.NOME, COUNT(ID_PEDIDO) AS PEDIDOS, SUM(TOTAL) AS TOTAL_GASTO FROM CLIENTE INNER JOIN PEDIDO ON PEDIDO.ID_CLIENTE = CLIENTE.ID_CLIENTE WHERE PEDIDO.ID_CLIENTE =  5;

-- Listar os 3 produtos mais vendidos (em quantidade).
SELECT COUNT(ITEM_PEDIDO.ID_PRODUTO) QUANTIDADE_VENDAS, PRODUTO.NOME FROM PEDIDO INNER JOIN ITEM_PEDIDO ON ITEM_PEDIDO.ID_PEDIDO = PEDIDO.ID_PEDIDO INNER JOIN PRODUTO ON PRODUTO.ID_PRODUTO = ITEM_PEDIDO.ID_PRODUTO GROUP BY ITEM_PEDIDO.ID_PRODUTO ORDER BY COUNT(ITEM_PEDIDO.ID_PRODUTO) DESC LIMIT 3;


-- DROP DATABASE E_COMMERCE;
